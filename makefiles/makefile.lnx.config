ifndef CONFIG_FILE_INCLUDED
CONFIG_FILE_INCLUDED=1

ifndef NOTQUIET
QUIETCMD=@
endif

__LINUX__=1
export __LINUX__
ifndef NO_NASM
ASM_C_FLAGS=-DHAS_ASSEMBLY
HAVE_NASM=1
endif

ifdef WORDALIGN
ALIGN=
else
ALIGN=
endif

nullstring :=

space := $(nullstring) # end of the line
# exerpt from make manual (3.79.1) describing the above declaration 
# of $(space) ...
# Here the value of the variable space is precisely one 
# space. The comment `# end of the line' is included 
# here just for clarity. Since trailing space characters 
# are not stripped from variable values, just a space at 
# the end of the line would have the same effect (but be 
# rather hard to read). If you put whitespace at the end 
# of a variable value, it is a good idea to put a comment
# like that at the end of the line to make your intent 
# clear.

NO_PROGLIB=TRUE
SYSPATHCHAR:=/
PATHCHAR=/
OBJEXT=o
LIBEXT=.a
# the extension applied to libraries to link to
LINK_LIBEXT= 
# a prefix command applied to libraries to link to
LIBPREFIX=-l
LIBNAMEPREFIX=lib
SHLIBEXT=.so
PROGEXT=
OUTNAMEOPT=-o
MAPOUTOPT=-Wl,-Map,
MAKE_DLL_OPT=-shared
LD_OUTNAMEOPT=-o$(space)
RPATH_OPT=-Wl,-rpath,
RPATHLINK_OPT=-Wl,-rpath-link,
LD_BASE_OPTS=-Wl,--export-dynamic -Wl,-warn-common -Wl,-rpath,.
USES_RPATH=1
# okay so part of the reason that I did not define COMMON_LIBS
# until only just now, is cause linux is self destructive when it comes to 
# linking a library product and refencing the same library as a input.
# also - gcc(ld) reports an error if the library doesn't exist!
#COMMON_LIBS+=$(filter-out $(LIBNAME1),shmem syslog osalot procreg configscript fraction containers)
#ifndef DEADLIB
#COMMON_LIBS+=deadlib
#endif
ifdef STATIC
  LD_DEBUG_FLAGS=$(LD_BASE_OPTS) -g
  LD_RELEASE_FLAGS=$(LD_BASE_OPTS) -s
else
  LD_DEBUG_FLAGS=$(LD_BASE_OPTS) -g
  LD_RELEASE_FLAGS=$(LD_BASE_OPTS) -s
endif
# do not define this option if it's not used!
#SUBSYSOPT=
LN_OUTNAMEOPT=
LIBPATHOPT=-L
# this flag should be defined if and only if ppc is used...
# else we'll assume that the native compiler has bad arguments
# or is additionally switched based on the compiler type...
# -DHAVE_GOOD_VA_ARGS 
C_DEPEND_FLAGS=-MMD -MF$(@:.o=.d)

##  ADDED
#-Wno-format
#  this may have to be opened off based on some other flag
# but this warning is REALLY annoying anymore.
#  _32 is long, and not int (or is it cause it's 32 bit) 
#  and %d is not %ld but it's not %Ld either... which is what
#  a long passed as a %ld is... so now %ld = %Ld but before
#  %ld=%d unless even before that %ld!=%d (16 bit dos win16)
#-Wno-format 
C_COMMON_FLAGS:=-DEMPTY_STRUCT="struct{}" $(if $(CPLUSPLUS_BUILD)$(__ARM__),,-Wdeclaration-after-statement) -DGCC -D__UNIX__ -D__LINUX__ -D_REENTRANT -D_THREAD_SAFE $(ASM_C_FLAGS) $(MKCFLAGS)
ifeq '$(__LINUX64__)' '1'
C_COMMON_FLAGS:=$(C_COMMON_FLAGS) -fPIC -m64
endif
C_RELEASE_FLAGS=
C_DEBUG_FLAGS=-g -D_DEBUG

ifndef GCC
GCC=$(CROSS)gcc
endif

ifdef __MAKE_ENV__
# Sometimes this makefile is called by other makefiles that set CFLAGS.  
# However, those usually should go at the end.  That is what EXTRA_CFLAGS is 
# for below.
 EXTRA_CFLAGS:=$(CFLAGS)
 CFLAGS= -c -Wall $(ALIGN) $(C_$(DEST_TYPE)_FLAGS) $(C_COMMON_FLAGS) $(C_DEPEND_FLAGS) $(INCLUDEPATH) $(EXTRA_CFLAGS)
 CC:=$(QUIETCMD)$(CC)
 CXX=$(QUIETCMD)$(CXX)
else
 CC=$(QUIETCMD)$(GCC) -c -Wall $(ALIGN) $(C_$(DEST_TYPE)_FLAGS) $(C_COMMON_FLAGS) $(C_DEPEND_FLAGS)
 CXX=$(QUIETCMD)$(CROSS)g++ -c -Wall $(ALIGN) $(C_$(DEST_TYPE)_FLAGS) $(C_COMMON_FLAGS) $(C_DEPEND_FLAGS)
endif

# this rule should be correct for gcc to compile correctly
# then we just have to worry about c99 incompliancy on Windoze!
# 2.95.3 may or may not compile - but that can be handled with flags...
# or- even better - use the simple CC rule...
#define CCRULE
#        $(CC) $(OUTNAMEOPT)$(2) $(1) -MF$(4) -MT$(2) $(3)
#endef

#define CCRULE
#	$(SACK_BASE)/makefiles/ppc -l $(C_COMMON_FLAGS) $(1) -o$(2:.$(OBJEXT)=.i) -MF$(4) -MT$(2) $(3)
#        $(CC) $(OUTNAMEOPT)$(2) $(2:.$(OBJEXT)=.i)
#endef

define LD_INPUT
$(patsubst $(foreach OBJ,$(ALL_POST_OBJS),$(call OBJNAME,%,$(call filterdestpath,$(OBJ)))),,$(1) $(2))
endef
define LD_FINAL_INPUT
$(filter-out $(patsubst $(foreach OBJ,$(ALL_POST_OBJS),$(call OBJNAME,%,$(call filterdestpath,$(OBJ)))),,$(1)),$(1))    \
$(foreach literal,$(2),$(if $(filter-out ./,$(dir $(literal))),,$(FINALDEST)$(BINLIBPATH)$(DEST_SUFFIX)/)$(literal) )
endef
$(foreach OBJ,$(ALL_POST_OBJS),$(call OBJNAME,1,$(call filterdestpath,$(OBJ))) )
EXEOBJS=$(if $(__NO_AUTO_LIBS__),,$(SACK_BASE)/src/deadstart/deadstart_prog)
LIBOBJS=$(if $(__NO_AUTO_LIBS__),,$(SACK_BASE)/src/deadstart/deadstart_lib)
ALL_PRE_OBJS=$(if $(__NO_AUTO_LIBS__),,$(SACK_BASE)/src/deadstart/deadstart_list)
ALL_POST_OBJS=$(if $(__NO_AUTO_LIBS__),,$(SACK_BASE)/src/deadstart/deadstart_end)

# modification to auto specify bag.psi as a linked library
# many of these references are to be removed in future usages
# so that sack may build monoliticly
COMMON_LIBS+=$(if $(SACK_BUILD),sack,$(if $(BAG),,$(if $(__NO_GUI__),,bag.psi)) $(if $(__NO_AUTO_LIBS__),,bag))

LD_EXEFLAGS=-ldl

ifdef __LINUX64__
 LD=$(QUIETCMD)$(GCC) -m64 -Wl,--export-dynamic $(MKLDFLAGS) $(LD_$(DEST_TYPE)FLAGS) -lpthread
else
ifdef __MAKE_ENV__
 LD=$(QUIETCMD)$(CC) -Wl,--export-dynamic $(MKLDFLAGS) $(LD_$(DEST_TYPE)FLAGS) -lpthread
else
 # I would prefer to use the ld tool here (or libtool maybe)
 LD=$(QUIETCMD)$(GCC) -Wl,--export-dynamic $(MKLDFLAGS) $(LD_$(DEST_TYPE)FLAGS) -lpthread
endif
endif
LD_DEF_OPT=
SHARED_ONLY=1

ifdef __MAKE_ENV__
 AR:=$(QUIETCMD)$(AR) r
else
 AR=$(QUIETCMD)ar r
endif

RC=$(QUIETCMD)echo No Windows Resource Compiler. $@ $(PWD)

ifdef __CYGWIN__
AFLAGS=-f win32 -i$(CURDIR)/ -i$(SACK_BASE)/include/nasm/ -D__WATCOM__ $(STATFLAGS)
else
AFLAGS=-f elf -i$(CURDIR)/ -i$(SACK_BASE)/include/nasm/ -D__LINUX__ $(STATFLAGS)
endif
ASM=$(QUIETCMD)nasm

# depend list on linux is auto built with the executables.
MAKEDEPLIST=
define MAKEDEPEND
endef

endif
