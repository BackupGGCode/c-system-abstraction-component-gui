ifndef CONFIG_FILE_INCLUDED
CONFIG_FILE_INCLUDED=1

# uncomment to compile direct to image/display libs...
FORCE_NO_INTERFACE=1


ifndef NOTQUIET
QUIETCMD=@
endif

__WINDOWS__=1
export __WINDOWS__

# okay think this suite is able to directly build to the final destinations...
# and this is the switch which causes this to happen (as inobvious as that 
# may be...)
USES_RPATH=1
# kinda like SHARED_ONLY but doesn't modify the path where the library
# portion is checked for... just says don't check the .lib as a dependancy
# of the .dll...
ifdef USES_RPATH
NO_LIB_DEPEND=1
endif

PATH:=$(SACK_BASE)/bin_tools;$(PATH)
export PATH

ifndef HAVE_NASM
HAVE_NASM:=$(if $(shell nasm.exe -h),1,)
export HAVE_NASM
endif

override MKCFLAGS:=$(MKCFLAGS) -DHAVE_GOOD_VA_ARGS $(if $(NO_ANONYMOUS_STRUCTS),,-DHAVE_ANONYMOUS_STRUCTURES) $(if $(HAVE_NASM),-DHAS_ASSEMBLY,)

nullstring :=
space := $(nullstring) # end of the line

ifdef WORDALIGN
ALIGN=
else
ALIGN=
endif
HERE:=$(CURDIR)
SYSPATHCHAR:=$(subst \\,\,\\)
PATHCHAR:=$(subst \\,\,\\)
OBJEXT=obj
LIBEXT=.lib
LINK_LIBEXT=.lib
LIBPREFIX=
LIBNAMEPREFIX=
SHLIBEXT=.dll
PROGEXT=.exe
OUTNAMEOPT=/fo=

OTHERCLEAN=*.err

INCLUDEPATH=$(foreach IPATH,$(INCLUDEDIRS),-I$(subst /,\,$(IPATH)) )

//-wcd=137 

C_ALL_WARNINGS=-W4
C_COMMON_FLAGS=$(C_$(DEST_TYPE)_FLAGS) $(MKCFLAGS) \
   -D__OBSCURE_STREAM_INTERNALS  -D_DLL \
   -D_MT -D__WINDOWS__ -D_WIN32_WINNT=0x0500 \
   $(if $(__NO_GUI__),-D__NO_GUI__,) \
   $(if $(__NO_SQL__),-D__NO_SQL__ -D__NO_OPTIONS__, \
       $(if $(__NO_OPTIONS__),-D__NO_OPTIONS__,)) \
       -DWIN32

#       $(if $(FORCE_NO_INTERFACE),-DFORCE_NO_INTERFACE,)
# this was moved to be the default mode for internal building.
# external builds will still use interface.

C_RELEASE_FLAGS=-wcd=111
C_DEBUG_FLAGS=-wx -D_DEBUG 
CPP_FLAGS= -wcd=387 -wcd=391 -wcd=726 -wcd=555 -wcd=368
C_FLAGS= -wcd=300 -wcd=302 -wcd=201 -fr=$(subst /,\,$(INTDEST)\)
C_DLL_FLAGS=$(if $(STATIC),,-br) -bt -bd
C_PROG_FLAGS=$(if $(STATIC),,-br) -bt
C_LIB_FLAGS=$(if $(STATIC),,-br) -bt
CPP_DLL_FLAGS=-D__SW_BD
CPP_PROG_FLAGS=
CPP_LIB_FLAGS=

#CC=wcc386 
# /zpw - warn about packing filling... may be usefule
#   but windows headers are so junky...
WATCOM_C_FLAGS=-bm -zld -zq  /fp5 /fpi87 -st -s
ifeq '$(filter debug static_debug,$(DEST))' ''
CC=wcc386.exe $(WATCOM_C_FLAGS) -oxh $(ALIGNMENT)
CXX=wpp386.exe -xs -bm -zq -zld  -oxh $(ALIGNMENT)
else
CC=wcc386.exe $(WATCOM_C_FLAGS) -d2 -od -oe=0 $(ALIGNMENT)
CXX=wpp386.exe -xs -bm -zq -zld -d2 -od -oe=0 $(ALIGNMENT)
endif

# indicate that c++ compilation is possible.
CPP_ABLE=1 

# 1 - flags (-I, -D)
# 2 - output
# 3 - inputs
# 4 - depend out
# 5 - compiler only flags

#	$(subst /,$(SYSPATHCHAR),$(SACK_BASE)/makefiles/ppc) -f -L $(C_COMMON_FLAGS)  $(6) $(1) -o$(2:.$(OBJEXT)=.i) -MF$(4) -MT$(2) -K $(3)
#        $(subst /,$(SYSPATHCHAR),$(2:.$(OBJEXT)=.i))
AUTODEP_INFO=/adfs /ad=$(subst /,\,$(4)) /adt=$(subst /,\,$(2)) /add=$(subst /,\,$(3)) 
# need to wait for 1.4 to come out...
#AUTODEP_INFO+=/adhp=$(subst \Q,,$(subst /,\,$(dir $(3)))Q)
#AUTODEP_INFO+=/adhp=$(subst /,\,$(dir $(3)))
define CCRULE
	$(QUIETCMD)$(CC) $(AUTODEP_INFO) $(C_FLAGS) $(C_COMMON_FLAGS) $(6) $(5)  $(subst /,\,$(1)) $(subst /,\,$(3)) /fo=$(subst /,\,$(2))
endef
#$(subst /,$(SYSPATHCHAR),$(SACK_BASE)/makefiles/ppc) -D__cplusplus=1 -f -L $(C_COMMON_FLAGS) $(6) $(1) -o$(2:.$(OBJEXT)=.i) -MF$(4) -MT$(2) -K $(3)
define CXXRULE
	$(QUIETCMD)$(CXX) $(AUTODEP_INFO) $(CPP_FLAGS) $(C_COMMON_FLAGS) $(6) $(5) $(subst /,\,$(1)) $(subst /,\,$(3)) /fo=$(subst /,\,$(2))
endef

MAPOUTOPT=option map=
MAKE_DLL_OPT=
LIBPATHOPT=
SUBSYSOPT=           	
LD_OUTNAMEOPT=name$(space)
LD_DEBUG_FLAGS=debug all
LD_RELEASE_FLAGS=
#debug all
#LD=wlink system nt
LD_DEF_OPT=

define LD_INPUT
file {$(1)}
endef

ifdef SACK_BUILD
COMMON_LIBS+= $(if $(__NO_AUTO_LIBS__),,sack)
else
# this can be handled without linking by using interface.conf to
# auto load bag.image and bag.video
LINK_GUI=1

DIRECT_LINK_VIDEO=$(if $(LINK_GUI),$(if $(STATIC)forced_enabled,bag.image bag.video $(if $(__WINDOWS__),$(if $(STATIC),png,),),),)
#$(warning blah:$(DIRECT_LINK_VIDEO))
COMMON_LIBS+= $(if $(SACK_BUILD)$(__NO_AUTO_LIBS__),,bag $(if $(SACK_BUILD)$(BAG),,$(if $(__NO_GUI__),,$(DIRECT_LINK_VIDEO) bag.psi)))
endif
#COMMON_LIBS+=sack
COMMON_SYS_LIBS+=ws2_32 opengl32 odbc32 iphlpapi winmm

ifndef USES_RPATH
DOWLIB=wlib -q -c -ii -fo -n $(subst /,\,$(1)).lib @$(1).lbc
DOWLIB_EXE=wlib -q -c -ii -fo -n $(subst /,\,$(1)).lib @$(1).lbc
else
DOWLIB=wlib -q -c -ii -fo -n $(subst /,\,$(11)) @$(1).lbc
endif

WLINK_EXTRA:=library $(if $(STATIC),clib3r,clbrdll)

ifdef LINK_MINIMAL
LIBFILE=library
else
LIBFILE=$(if $(STATIC),libfile,library)
endif

MORE_LD_OPTS=$(if $(USE_LARGE_STACK),option stack=128k,)

ifneq '$(filter-out debug static_debug,$(DEST))' ''
# if DEBUG use a different link statement.
#ZERO_STAMP=$(SACK_BASE)/makefiles/$(RINTDEST)/zerostamp.exe

#include $(SACK_BASE)/makefiles/prog/zerostamp/makefile.depends

USE_LINK_RULES=1

# provide a way to link minimally - which does not include (perhaps) registered classes
# for controls...

#	$(QUIETCMD)$(ZERO_STAMP) $(2)
define LIBLINKRULE
	$(QUIETCMD)wlink $(3) option caseexact option map=$(1).map option quiet system nt_dll name $(subst /,\,$(2))$(if $(suffix $(notdir $(2))),,.) option impfile=$(1).lbc file {$(4)} $(if $(10),option resource=$(10),) $(foreach path,$(9), libpath $(subst /,\,$(path))) $(foreach lib,$(5),$(LIBFILE) $(lib)) $(foreach lib,$(COMMON_SYS_LIBS),library $(lib)$(LINK_LIBEXT)) $(WLINK_EXTRA)  $(foreach lib,$(13),$(LIBFILE) $(FINALDEST)$(LIBPATH)/$(DEST_SUFFIX)/$(lib)$(STATIC_LITERAL_NAME)$(LINK_LIBEXT))
	$(QUIETCMD)$(DOWLIB)
endef

#	$(QUIETCMD)$(ZERO_STAMP) $(2)
define CON_PRGLINKRULE
	$(QUIETCMD)wlink $(3) $(MORE_LD_OPTS) option caseexact option map=$(1).map option quiet system nt name $(subst /,\,$(2))$(if $(suffix $(notdir $(2))),,.) option impfile=$(1).lbc file {$(4)} $(if $(10),option resource=$(10),) $(foreach path,$(9), libpath $(subst /,\,$(path))) $(foreach lib,$(5),$(LIBFILE) $(lib)) $(foreach lib,$(COMMON_SYS_LIBS),library $(lib)$(LINK_LIBEXT)) $(WLINK_EXTRA) $(foreach lib,$(12),$(LIBFILE) $(FINALDEST)$(LIBPATH)/$(DEST_SUFFIX)/$(lib)$(STATIC_LITERAL_NAME)$(LINK_LIBEXT))
	$(QUIETCMD)$(DOWLIB)
endef

#	$(QUIETCMD)$(ZERO_STAMP) $(2)
define WIN_PRGLINKRULE
	$(QUIETCMD)wlink $(3) $(MORE_LD_OPTS) option caseexact option map=$(1).map option quiet system nt_win name $(subst /,\,$(2))$(if $(suffix $(notdir $(2))),,.) option impfile=$(1).lbc file {$(4)} $(if $(10),option resource=$(10),) $(foreach path,$(9), libpath $(subst /,\,$(path))) $(foreach lib,$(5),$(LIBFILE) $(lib)) $(foreach lib,$(COMMON_SYS_LIBS),library $(lib)$(LINK_LIBEXT)) $(WLINK_EXTRA) $(foreach lib,$(12),$(LIBFILE) $(FINALDEST)$(LIBPATH)/$(DEST_SUFFIX)/$(lib)$(STATIC_LITERAL_NAME)$(LINK_LIBEXT))
	$(QUIETCMD)$(DOWLIB)
endef
else
USE_LINK_RULES=1
define LIBLINKRULE
	$(QUIETCMD)wlink $(3) option caseexact option map=$(1).map option quiet system nt_dll name $(subst /,\,$(2))$(if $(suffix $(notdir $(2))),,.) option impfile=$(1).lbc file {$(4)} $(if $(10),option resource=$(10),) $(foreach path,$(9), libpath $(subst /,\,$(path))) $(foreach lib,$(5),$(LIBFILE) $(lib)) $(foreach lib,$(COMMON_SYS_LIBS),library $(lib)$(LINK_LIBEXT)) $(WLINK_EXTRA) $(foreach lib,$(13),$(LIBFILE) $(FINALDEST)$(LIBPATH)/$(DEST_SUFFIX)/$(lib)$(STATIC_LITERAL_NAME)$(LINK_LIBEXT))
	$(QUIETCMD)$(DOWLIB)
endef

define CON_PRGLINKRULE
	$(QUIETCMD)wlink $(3) $(MORE_LD_OPTS) option caseexact option map=$(1).map option quiet system nt name $(subst /,\,$(2))$(if $(suffix $(notdir $(2))),,.) option impfile=$(1).lbc file {$(4)} $(if $(10),option resource=$(10),) $(foreach path,$(9), libpath $(subst /,\,$(path))) $(foreach lib,$(5),$(LIBFILE) $(lib)) $(foreach lib,$(COMMON_SYS_LIBS),library $(lib)$(LINK_LIBEXT)) $(WLINK_EXTRA) $(foreach lib,$(12),$(LIBFILE) $(FINALDEST)$(LIBPATH)/$(DEST_SUFFIX)/$(lib)$(STATIC_LITERAL_NAME)$(LINK_LIBEXT))
	$(QUIETCMD)$(DOWLIB)
endef

define WIN_PRGLINKRULE
	$(QUIETCMD)wlink $(3) $(MORE_LD_OPTS) option caseexact option map=$(1).map option quiet system nt_win name $(subst /,\,$(2)) option impfile=$(1).lbc file {$(4)} $(if $(10),option resource=$(10),) $(foreach path,$(9), libpath $(subst /,\,$(path))) $(foreach lib,$(5),$(LIBFILE) $(lib)) $(foreach lib,$(COMMON_SYS_LIBS),library $(lib)$(LINK_LIBEXT)) $(WLINK_EXTRA) $(foreach lib,$(12),$(LIBFILE) $(FINALDEST)$(LIBPATH)/$(DEST_SUFFIX)/$(lib)$(STATIC_LITERAL_NAME)$(LINK_LIBEXT))
	$(QUIETCMD)$(DOWLIB)
endef
endif

EXEOBJS=$(if $(__NO_AUTO_LIBS__),,$(SACK_BASE)/src/deadstart/deadstart_prog)

LN_OUTNAMEOPT=-o=
AR=wlib -c -q -n
define ARRULE
	$(QUIETCMD)wlib -c -q -n $(subst /,$(SYSPATHCHAR),$(1)) $(foreach OBJ,$(2),+$(OBJ)) $(if not $(blank $(3)),$(foreach OBJ,$(3),+$(OBJ)),) $(foreach lib,$(4),+$(FINALDEST)$(LIBPATH)/$(DEST_SUFFIX)/$(lib)$(STATIC_LITERAL_NAME)$(LINK_LIBEXT))
endef


AFLAGS+=-f win32 -i$(CURDIR)/ -i$(SACK_BASE)/include/nasm/ -D__WATCOM__ -i$(CURDIR)/ $(STATFLAGS)
ASM=nasm
#AFLAGS+=-f win32 -i$(CURDIR)/ -i$(SACK_BASE)/include/nasm/ -D__WATCOM__ -i$(CURDIR)/ $(STATFLAGS)
#ASM=yasm -r nasm

ifeq '$(filter makebuild,$(MAKECMDGOALS))' 'makebuild'
define ASMRULE
	$(QUIETCMD)$(ASM) $(if $(filter-out ./,$(dir $(2)),-i$(dir $(2))),) $(AFLAGS) -o $(1) $(2)
	$(QUIETCMD)$$(QUIET)echo $$(foreach FILE,$$(subst $$(space)\\$$(space),,$$(shell $(ASM) -M $(AFLAGS) -o $(1) -i$(3) $(2))),$$(if $$(filter $$(FILE),$$(notdir $$(FILE))),$(CURDIR)/$$(FILE),$$(FILE))) \> $(1:.$(OBJEXT)=.d)
endef
else        
define ASMRULE
	$(QUIETCMD)$(ASM) $(AFLAGS) -o $(1) -i$(3) $(2)
	$(QUIETCMD)echo $(foreach FILE,$(subst $(space)\$(space),,$(shell $(ASM) -M $(AFLAGS) -o $(1) -i$(3) $(2))),$(if $(filter $(FILE),$(notdir $(FILE))),$(CURDIR)/$(FILE),$(FILE))) > $(1:.$(OBJEXT)=.d)
endef
endif        
RC_OUT_OPT=/fo
RC=rc

endif
