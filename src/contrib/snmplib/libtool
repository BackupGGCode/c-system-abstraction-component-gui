#! /bin/sh

# libtool - Provide generalized library-building support services.
#
# Generated automatically by ltconfig - GNU libtool 1.0
# This program was configured as follows,
# on host lister.net.cmu.edu:
#
# CC="gcc" CFLAGS="-g -Wall -pedantic" CPPFLAGS="" \
# LD="/usr/ccs/bin/ld" RANLIB="ranlib" LN_S="ln -s" \
#   ./ltconfig --disable-static --with-gcc --no-verify ./ltmain.sh sparc-sun-solaris2.6
#
# Compiler and other test output produced by ltconfig, useful for
# debugging ltconfig, is in ./config.log if it exists.

# The version of ltconfig that generated this script.
LTCONFIG_VERSION="1.0"

# Whether or not to build libtool libraries.
build_libtool_libs=yes

# Whether or not to build old-style libraries.
build_old_libs=no

# The host system.
host_alias="sparc-sun-solaris2.6"
host="sparc-sun-solaris2.6"

# The archiver.
AR='ar'

# The linker used to build libraries.
LD='/usr/ccs/bin/ld'

# Whether we need hard or soft links.
LN_S='ln -s'

# How to create reloadable object files.
reload_flag=' -r'
reload_cmds='$LD$reload_flag -o $output$reload_objs'

# How to pass a linker flag through the compiler.
wl='-Wl,'

# Additional compiler flags for building library objects.
pic_flag=' -fPIC'

# Compiler flag to prevent dynamic linking.
link_static_flag='-static'

# Compiler flag to allow reflexive dlopens.
export_dynamic_flag=''

# Pattern to match compiler flags for creating libNAME_p libraries:
profile_flag_pattern='-pg?'

# Library versioning type.
version_type=linux

# List of archive names.  First name is the real one, the rest are links.
# The last name is the one that the linker finds with -lNAME.
library_names_spec='$libname.so.$versuffix $libname.so.$major $libname.so'

# The coded name of the library, if different from the real name.
soname_spec='$libname.so.$major'

# Commands used to build and install an old-style archive.
RANLIB='ranlib'
old_archive_cmds='$AR cru $oldlib$oldobjs;$RANLIB $oldlib'
old_postinstall_cmds='chmod 644 $oldlib;$RANLIB $oldlib'

# Commands used to build and install a shared archive.
archive_cmds='$LD -G -z text -h $soname -o $lib$libobjs$deplibs'
postinstall_cmds=''

# Flag that allows shared libraries with undefined symbols to be built.
allow_undefined_flag=''

# Commands used to finish a libtool library installation in a directory.
finish_cmds=''

# How to strip a library file.
striplib=''
old_striplib=''

# This is the shared library runtime path variable.
runpath_var=

# This is the shared library path variable.
shlibpath_var=LD_LIBRARY_PATH

# How to hardcode a shared library path into an executable.
hardcode_action=immediate

# Flag to hardcode $libdir into a binary during linking.
# This must work even if $libdir does not exist.
hardcode_libdir_flag_spec='-R$libdir'

# Whether we need a single -rpath flag with a separated argument.
hardcode_libdir_separator=''

# Set to yes if using DIR/libNAME.so during linking hardcodes DIR into the
# resulting binary.
hardcode_direct=no

# Set to yes if using the -LDIR flag during linking hardcodes DIR into the
# resulting binary.
hardcode_minus_L=no

# Set to yes if using RUNPATH_VAR=DIR during linking hardcodes DIR into the
# resulting binary.
hardcode_runpath_var=no

# Set to yes if using SHLIBPATH_VAR=DIR during linking hardcodes DIR into
# the resulting binary.
hardcode_shlibpath_var=no

# Find the path to this script.
thisdir=`echo "$0" | sed -e 's%/[^/]*$%%'`
test "X$0" = "X$thisdir" && thisdir=.

# Execute the libtool backend.
. $thisdir/./ltmain.sh
exit 1
