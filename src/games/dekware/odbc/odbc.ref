#include <windows.h>

#include <sharemem.h> // include first to avoid EXPORT redefinition
//#include <sql.h>
#include <sqlext.h>

#include <stdio.h>
#include <string.h>
#define PLUGIN_MODULE
#include "plugin.h"

#ifdef _LINUX
///src/msql/msql.c</tt>
///src/msql/relshow.c</tt>
//<li> <tt>./src/msql/msqldump.c</tt>
//<li> <tt>./src/msql/msqladmin.c</tt>
#endif
#undef byOutput
#undef nOutput

extern INDEX myPlug;
extern int myTypeID;

static BYTE byOutput[32768];
static int  nOutput;

static BYTE byResult[32768]; // largest single record from database (?)
static int  ResultLen;
static PBYTE pResults[256]; // pointer to start of data in byResult Buffer.
static int  nResults;

static BOOL bInterlock;  // lockout multi-thread entrace... may be irrelavent...

typedef struct odbc_handle_tag{
   HENV    env;  // odbc database access handle...
   HDBC    hdbc; // handle to database connection
   HSTMT   hstmt;
}ODBC, *PODBC;


typedef struct mydatapath_tag {
   DATAPATH common;
   PODBC    handle;
} MYDATAPATH, *PMYDATAPATH;

FunctionProto  _OPEN,
   COMMAND,
   LISTDATA,
   QUERY,
   CLOSE,
   HELP,
   CREATE,
   STORE,
   RETRIEVE,
   SETTYPE;

#define ODBC_TF_DATE   0x80000000
#define ODBC_TF_NUMBER 0x40000000
#define ODBC_TF_TEXT   0x20000000

method_entry methods[]={
  {DEFTEXT("OPEN")   ,0,4  ,DEFTEXT("Establish connection to data sets"),_OPEN}
// ,{DEFTEXT("CONNECT"),0,7  ,DEFTEXT("Establish connection to data sets"),_OPEN}
 ,{DEFTEXT("COMMAND"),0,7  ,DEFTEXT("Perform ODBC command"),COMMAND}
 ,{DEFTEXT("LIST")   ,0,4  ,DEFTEXT("List data from database..."),LISTDATA}
 ,{DEFTEXT("QUERY")   ,0,5  ,DEFTEXT("List data from database..."),QUERY}
 ,{DEFTEXT("CLOSE")   ,0,5  ,DEFTEXT("List data from database..."),CLOSE}
 ,{DEFTEXT("HELP")   ,0,4  ,DEFTEXT("List data from database..."),HELP}
 ,{DEFTEXT("CREATE") ,0,6  ,DEFTEXT("Create an empty object with vars..."), CREATE }
 ,{DEFTEXT("STORE") ,0,5  ,DEFTEXT("Store object with vars..."), STORE }
 ,{DEFTEXT("RETRIEVE") ,0,8  ,DEFTEXT("Retrieve objects with vars..."), RETRIEVE }
 ,{DEFTEXT("SETTYPE") ,0,7  ,DEFTEXT("Create a 'date' variable..."), SETTYPE }

};

#define NUM_COMMANDS (sizeof(commands)/sizeof(command_entry))
int nCommands = NUM_COMMANDS;

void DumpInfo( PLINKQUEUE *pplq, SQLSMALLINT type, SQLHANDLE handle )
{
   RETCODE rc;
   char statecode[6];
   char message[256];
   long  native;
   short  msglen;
   SQLSMALLINT  n;
   n = 1;
   do
   {
#if !defined( __LCC__ ) && !defined( __TURBOC__ )
      rc = SQLGetDiagRec( type 
                        , handle
                        , n++, statecode
                        , &native
                        , message, sizeof( message ), &msglen );
      if( rc == SQL_INVALID_HANDLE )
         break;
      if( rc != SQL_NO_DATA )
      {
         sprintf( byOutput, "(%5s)[%d]:%s", statecode, native, message );
         EnqueLink( pplq, SegCreateFromText( byOutput ) );
      }
#else
      {
         DECLTEXT( msg, "Cannot get diagnostic records under NT 3.51 LCC" );
          EnqueLink( pplq, &msg );
      }
#endif
   } while( rc != SQL_NO_DATA );
}

void CreateObject( PODBC pODBC, PENTITY peContainer, PTEXT pName, PTEXT pTable )
{
   PENTITY pe;
   RETCODE rc;
   int ResultOffset;
//   while( ( rc = SQL
   pe = CreateEntityIn( peContainer, pName );
   while( ( rc = SQLFetch( pODBC->hstmt ) ) == SQL_SUCCESS )
   {
      nResults = 0;
      ResultOffset = 0;
      do
      {
         pResults[nResults] = byResult + ResultOffset;
         rc = SQLGetData( pODBC->hstmt
                        , (short)(1 + nResults++)
                        , SQL_C_CHAR
                        , byResult + ResultOffset
                        , sizeof( byResult ) - ResultOffset
                        , &ResultLen );
         if( rc == SQL_SUCCESS || 
             rc == SQL_SUCCESS_WITH_INFO )
         {
            if( ResultLen == SQL_NO_TOTAL ||  // -4
                ResultLen == SQL_NULL_DATA )  // -1 
            {
            }

            if( ResultLen > 0 )
            {
               byResult[ResultOffset + ResultLen] = 0;
               ResultOffset += ResultLen + 1;
            }
            else
            {
               pResults[nResults-1] = NULL;
            }
         }
         else
         {
            nResults--;  // one less result.
            pResults[nResults] = NULL;  // mark end of list...
         }
      } while( rc == SQL_SUCCESS );

      AddVariable( pe->pControlledBy
                 , pe, SegCreateFromText( pResults[3] ), NULL );
   }

   {
      DECLTEXT( msg, "_TABLE" );
      AddVariable( pe->pControlledBy
                 , pe, (PTEXT)&msg, pTable );
   }

}


char * GetBound( PTEXT pText )
{
   if( !pText )
      return "(Bad Variable)";
   if( pText->flags & ( TF_LOWER | TF_UPPER | TF_EQUAL ) )
   {
      if( (pText->flags & ( TF_LOWER | TF_UPPER ) ) == ( TF_LOWER | TF_UPPER ) )
         return "<>";
      if( (pText->flags & ( TF_LOWER | TF_EQUAL ) ) == ( TF_LOWER | TF_EQUAL ) )
         return ">=";
      if( (pText->flags & ( TF_EQUAL | TF_UPPER ) ) == ( TF_EQUAL | TF_UPPER ) )
         return "<=";
      if( pText->flags & ( TF_LOWER ) )
         return ">";
      if( pText->flags & ( TF_UPPER ) ) 
         return "<";
   }

   return "=";
}

void BuildResultObjects( PODBC pODBC, PENTITY peSource )
{
   PENTITY pe;
   RETCODE rc;
   int bDuplicated = FALSE;
   INDEX idx;
   int ResultOffset;

   while( ( rc = SQLFetch( pODBC->hstmt ) ) == SQL_SUCCESS )
   {
      nResults = 0;
      ResultOffset = 0;
      idx = 0;
      bDuplicated = TRUE;
      pe = Duplicate( peSource );
      do
      {
         pResults[nResults] = byResult + ResultOffset;
         rc = SQLGetData( pODBC->hstmt
                        , (short)(1 + nResults++)
                        , SQL_C_CHAR
                        , byResult
                        , sizeof( byResult )
                        , &ResultLen );

         if( rc == SQL_SUCCESS || 
             rc == SQL_SUCCESS_WITH_INFO )
         {
            PTEXT pVar;
            pVar = pe->pVars->pNode[idx];
            if( ResultLen == SQL_NO_TOTAL ||  // -4
                ResultLen == SQL_NULL_DATA )  // -1 
            {
            }

            if( ResultLen > 0 )
            {
               if( idx < pe->pVars->Cnt )
               {
                  LineRelease( GetIndirect( NEXTLINE( pVar ) ) );
                  SetIndirect( NEXTLINE( pVar ), SegCreateFromText( byResult ) );
               }
               else
               {
                  DebugBreak();
               }
            }
            else
            {
               LineRelease( GetIndirect( NEXTLINE( pVar ) ) );
               SetIndirect( NEXTLINE( pVar ), 0 );
               pResults[nResults-1] = NULL;
            }
            idx++;
         }
         else
         {
            nResults--;  // one less result.
            pResults[nResults] = NULL;  // mark end of list...
         }
      } while( rc == SQL_SUCCESS );
   }
   if( bDuplicated )
      DestroyEntity( peSource );
}


int HandleODBC( PSENTIENT ps, PTEXT parameters )
{
   PTEXT temp, command;
   PODBC pODBC = NULL;
   PLINKQUEUE *pplq;
   PMYDATAPATH pdp;
   int idx;
   int ResultOffset;

   pdp = (PMYDATAPATH)GetLink( ps->Current->pPlugin, myPlug );

   if( ps->CurrentMacro )
   {
      ps->CurrentMacro->state.flags.bSuccess = FALSE;
      if( pdp )
         pplq = pdp->common.ppInput;
   }
   else
      pplq = ps->Command->ppOutput;


   if( pdp && pdp->common.Type != myTypeID )
   {
      DECLTEXT( msg, "Data path is not available for ODBC use..." );
      EnqueLink( ps->Command->ppOutput, &msg );
      return 0;
   }

   if( command = GetParam( ps, &parameters ) ) 
   {
      RETCODE rc;
      idx = GetCommandIndex( commands, NUM_COMMANDS
                           , GetTextSize(command), GetText(command) );
      if( idx < 0 )
      {
         DECLTEXT( msg, "Unknown ODBC function specified." );
         EnqueLink( ps->Command->ppOutput, &msg );
         return 0;
      }

      if( pdp )
         pODBC = pdp->handle;
      else
         pODBC = NULL;

      if( pODBC && pODBC->hdbc )
      {
         rc = SQLAllocStmt( pODBC->hdbc
                          , &pODBC->hstmt );
         if( rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO )
         {
            DECLTEXT( msg, "Failed to open ODBC statement handle...." );
            EnqueLink( ps->Command->ppOutput, &msg );
            return 0;
         }
      }

      if( !pODBC && 
          commands[idx].function != _OPEN &&
          commands[idx].function != HELP )
      {
         DECLTEXT( msg, "ODBC Device is not open..." );
         EnqueLink( ps->Command->ppOutput, &msg );
         return 0;

      }


      switch( commands[idx].function )
      {
      case _OPEN:
      {
         PTEXT pDSN, pID, pPassword;

         if( !pODBC )
         {
            pdp = (PMYDATAPATH)CreateDataPath( sizeof( MYDATAPATH ) - sizeof( DATAPATH) );
            SetLink( ps->Current->pPlugin, myPlug, pdp );
            pdp->common.Type = myTypeID;
            pODBC = pdp->handle = (PODBC)Allocate( sizeof( ODBC) );
            MemSet( pODBC, 0, sizeof( ODBC ) );
         }
         if( !pODBC->env ) 
         {
            rc = SQLAllocEnv( &pODBC->env );
            if( rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO )
            {
               DECLTEXT( msg, "Failed to establish ODBC Environment Handle...." );
               EnqueLink( ps->Command->ppOutput, &msg );
               return 0;
            }
         }
         if( pODBC->hdbc )
         {
            DECLTEXT( msg, "ODBC Connection is already open...." );
            EnqueLink( ps->Command->ppOutput, &msg );
            return 0;
         }

         if( SQLAllocConnect( pODBC->env,
                              &pODBC->hdbc ) )
         {
            DECLTEXT( msg, "Failed to create ODBC Connection Handle...." );
            EnqueLink( ps->Command->ppOutput, &msg );
            goto clean_open0;
         }

         if( pDSN = GetParam( ps, &parameters ) )
         {  
            pID = GetParam( ps, &parameters );
            if( !(pPassword = GetParam( ps, &parameters ) ) )
            {
               DECLTEXT( msg, "Need to supply a password to open database us \" \" to specify none." );
               EnqueLink( ps->Command->ppOutput, &msg );
               goto clean_open1;
            }
            if( GetTextSize( pPassword ) == 1 &&
                GetText( pPassword )[0] == ' ' )
               pPassword->data.data[0] = 0;
            rc = SQLConnect( pODBC->hdbc
                           , GetText( pDSN ), SQL_NTS
                           , GetText( pID ), SQL_NTS
                           , GetText( pPassword ), SQL_NTS );
            if( rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO )
            {
               DECLTEXT( msg, "Failed to open ODBC Connection...." );
               EnqueLink( ps->Command->ppOutput, &msg );
               DumpInfo( pplq, SQL_HANDLE_DBC, pODBC->hdbc );
               goto clean_open1;
            }
            if( ps->CurrentMacro )
               ps->CurrentMacro->state.flags.bSuccess = TRUE;
         }
         else
         {
            DECLTEXT( msg, "Open reqires <database DSN> <user> <password>..." );
            EnqueLink( ps->Command->ppOutput, &msg );
            SQLFreeConnect( pODBC->hdbc );
            pODBC->hdbc = 0;
            SQLFreeEnv( pODBC->env );
            pODBC->env = 0;

            Release( pODBC );
            pODBC = NULL;

            pdp->handle = 0;
            pdp->common.Type = 0;
         }
      }
      break;
      case COMMAND:
      {
         PTEXT pCommand;
         pCommand = BuildLine( parameters );
         rc = SQLExecDirect( pODBC->hstmt
                           , GetText( pCommand ), SQL_NTS );
         LineRelease( pCommand );
         if( rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO )
         {
            DECLTEXT( msg, "ODBC Command excecution failed(1)...." );
            EnqueLink( ps->Command->ppOutput, &msg );
            DumpInfo( pplq, SQL_HANDLE_STMT, pODBC->hstmt );
         } 
      }
      break;
      case LISTDATA:
      {
         PTEXT pWhat;
         if( !pODBC )
            return 0;
         if( !(pWhat = GetParam( ps, &parameters ) ) )
         {
            DECLTEXT( msg, "please specify what to list.  (table, ... )" );
            EnqueLink( ps->Command->ppOutput, &msg );
         }
         else if( TextLike( pWhat, "table" ) ) 
         {
            PTEXT pWhat;
            if( pWhat = GetParam( ps, &parameters ) )
            {
               // SQLPrepare 
               // includes the table to list... therefore list the fields in the table.
               rc = SQLColumns( pODBC->hstmt
                              , NULL, 0
                              , NULL, 0
                              , GetText( pWhat ), SQL_NTS
                              , NULL, 0 );
               if( rc != SQL_SUCCESS_WITH_INFO &&
                   rc != SQL_SUCCESS )
               {
                  DumpInfo( pplq, SQL_HANDLE_STMT, pODBC->hstmt );
               }
               else if( rc == SQL_SUCCESS )
               {
                  while( ( rc = SQLFetch( pODBC->hstmt ) ) == SQL_SUCCESS )
                  {
                     nResults = 0;
                     ResultOffset = 0;
                     do
                     {
                        pResults[nResults] = byResult + ResultOffset;
                        rc = SQLGetData( pODBC->hstmt
                                       , (short)(1 + nResults++)
                                       , SQL_C_CHAR
                                       , byResult + ResultOffset
                                       , sizeof( byResult ) - ResultOffset
                                       , &ResultLen );
                        if( rc == SQL_SUCCESS || 
                            rc == SQL_SUCCESS_WITH_INFO )
                        {
                           if( ResultLen == SQL_NO_TOTAL ||  // -4
                               ResultLen == SQL_NULL_DATA )  // -1 
                           {
                           }

                           if( ResultLen > 0 )
                           {
                              byResult[ResultOffset + ResultLen] = 0;
                              ResultOffset += ResultLen + 1;
                           }
                           else
                           {
                              pResults[nResults-1] = NULL;
                           }
                        }
                        else
                        {
                           nResults--;  // one less result.
                           pResults[nResults] = NULL;  // mark end of list...
                        }
                     } while( rc == SQL_SUCCESS );
//                     byResult[ResultOffset] = 0;
                     EnqueLink( pplq
                              , SegAppend( SegCreateFromText( pResults[5] ),
                                           SegCreateFromText( pResults[3] ) ) );
                  }
                  EnqueLink( pplq, SegCreate(0) );
               }
            }
            else
            {
               rc = SQLTables( pODBC->hstmt, NULL, 0, NULL, 0, NULL, 0, NULL, 0 );
               if( rc == SQL_SUCCESS_WITH_INFO )
               {
                  DECLTEXT( msg, "blah info back..." );
                  EnqueLink( ps->Command->ppOutput, &msg );
               }
               else if( rc != SQL_SUCCESS_WITH_INFO && rc != SQL_SUCCESS )
               {
                  DumpInfo( pplq, SQL_HANDLE_STMT, pODBC->hstmt );
               }
               else if( rc == SQL_SUCCESS )
               {
                  RETCODE rc;
                  do
                  {
                     rc = SQLFetch( pODBC->hstmt );
                     if( rc == SQL_SUCCESS ) 
                     {
                        RETCODE rc;
                        ResultOffset = 0;
                        nResults = 0;
                        do
                        {
                           pResults[nResults] = byResult + ResultOffset;
                           rc = SQLGetData( pODBC->hstmt
                                          , (short)(1 + nResults++)
                                          , SQL_C_CHAR
                                          , byResult + ResultOffset
                                          , sizeof( byResult ) - ResultOffset
                                          , &ResultLen );
                           if( rc == SQL_SUCCESS || 
                               rc == SQL_SUCCESS_WITH_INFO )
                           {
                              if( ResultLen == SQL_NO_TOTAL ||  // -4
                                  ResultLen == SQL_NULL_DATA )  // -1 
                              {
                              }

                              if( ResultLen > 0 )
                              {
                                 byResult[ResultOffset + ResultLen] = 0;
                                 ResultOffset += ResultLen + 1;
                              }
                              else
                              {
                                 pResults[nResults-1] = NULL;
                              }
                           }
                           else
                           {
                              nResults--;  // one less result.
                              pResults[nResults] = NULL;  // mark end of list...
                           }
                        }
                        while( rc == SQL_SUCCESS );
                        if( nResults > 4 )
                        {
                           if( !strcmp( pResults[3], "TABLE" ) )
                           {
                              EnqueLink( pplq
                                       , SegCreateFromText( pResults[2] ) );
                           }
                        }
                     }
                     else
                     {
                        DumpInfo( pplq, SQL_HANDLE_STMT, pODBC->hstmt );
                     }
                  }
                  while( rc == SQL_SUCCESS );
               }
               EnqueLink( pplq, SegCreate(0) );
               if( ps->CurrentMacro )
                  ps->CurrentMacro->state.flags.bSuccess = TRUE;
            }
         }
      }
      break;
      case CREATE:
         {
            PTEXT pName, pTable;
            if( (pName = GetParam( ps, &parameters ) )&&
                (pTable = GetParam( ps, &parameters )) )
            {
               rc = SQLColumns( pODBC->hstmt
                              , NULL, 0
                              , NULL, 0
                              , GetText( pTable ), SQL_NTS
                              , NULL, 0 );
               if( rc != SQL_SUCCESS_WITH_INFO &&
                   rc != SQL_SUCCESS )
               {
                  DumpInfo( pplq, SQL_HANDLE_STMT, pODBC->hstmt );
               }
               else if( rc == SQL_SUCCESS )
               {
                  SegGrab( pName ); // keep this name...
                  CreateObject( pODBC, ps->Current, pName, pTable );
               }
            }
            else
            {
               DECLTEXT( msg, "create requires <object name> <from table>..." );
               EnqueLink( ps->Command->ppOutput, (PTEXT)&msg );
            }
         }
         break;
      case STORE:
         {
            PTEXT pte;
            INDEX idx;
            PENTITY pe;
            PTEXT pVar, pTable = NULL;
            PLINKSTACK pls = CreateLinkStack();
            if( ( pte = GetParam( ps, &parameters ) ) )
            {
               pe = FindThing( ps->Current, FIND_VISIBLE, pte );
               if( !pe )
               {
                  DECLTEXT( msg, "Cannot see entity to store into database..." );
                  EnqueLink( ps->Command->ppOutput, &msg );
                  break;
               }
               FORALL( pe->pVars, idx, pVar )
               {
                  if( TextIs( pVar, "_TABLE" ) )
                     pTable = pVar;
                  else
                     PushLink( pls, pVar );
               }
               if( !pTable )
               {
                  DECLTEXT( msg, "Entity does not have a table of origin defined..." );
                  EnqueLink( ps->Command->ppOutput, &msg );
                  DeleteLinkStack( pls );
                  break;
               }
               nOutput = sprintf( byOutput, "INSERT into %s ", GetText( NEXTLINE( pTable ) ) );
               FORALL( pls, idx, pVar )
               {
                  nOutput += sprintf( byOutput + nOutput, "%s%s"
                                    , (idx)?",":"("
                                    , GetText( pVar ) );
               }
               nOutput += sprintf( byOutput + nOutput, ") Values" );
               {
                  int wasnumber = FALSE;
                  FORALL( pls, idx, pVar )
                  {
                     PTEXT pVal;
                     pVal = GetIndirect( NEXTLINE( pVar ) );
                     if( pVal->flags & TF_QUOTE )
                     {
                        pVal->flags &= ~TF_QUOTE; // should be copy....
                        pVal = BuildLine( pVal );
                        pVal->flags |= TF_QUOTE;
                     }
                     else
                        pVal = BuildLine( pVal );
                     if( IsNumber( pVal ) )
                     {
                        nOutput += sprintf( byOutput + nOutput, "%s%s"
                                          , (idx)?(wasnumber)?",":"\',":"("
                                          , GetText( pVal ) );
                        wasnumber = TRUE;
                     }
                     else
                     {
                        nOutput += sprintf( byOutput + nOutput, "%s%s"
                                          , (idx)?(wasnumber)?",\'":"\',\'":"(\'"
                                          , GetText( pVal ) );
                        wasnumber = FALSE;
                     }
                     LineRelease( pVal );
                  }
                  if( wasnumber )
                     nOutput += sprintf( byOutput + nOutput, ")" );
                  else
                     nOutput += sprintf( byOutput + nOutput, "')" );
               }
//               DebugBreak();
               rc = SQLExecDirect( pODBC->hstmt
                                 , byOutput, SQL_NTS );

               if( rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO )
               {
                  PTEXT pCommand;
                  DECLTEXT( msg, "ODBC Command excecution failed(2)...." );
                  EnqueLink( ps->Command->ppOutput, &msg );
                  pCommand = SegCreateFromText( byOutput );
                  DumpInfo( ps->Command->ppOutput, SQL_HANDLE_STMT, pODBC->hstmt );
                  EnqueLink( ps->Command->ppOutput, pCommand );
               } 
               else
               {
                  DECLTEXT( msg, "Object stored into database." );
                  if( ps->CurrentMacro )
                     ps->CurrentMacro->state.flags.bSuccess = TRUE;
                  else
                     EnqueLink( ps->Command->ppOutput, &msg );
                  DestroyEntity( pe ); 
               }
               // get all variables...
               // get _TABLE variable...
               // dunno how to fetch variables really....
            }  
            DeleteLinkStack( pls );
         }
         break;
      case RETRIEVE:
         {
            if( temp = GetParam( ps, &parameters ) )
            {
               PENTITY pe;
               INDEX idx;
               PTEXT pVar;
               int didone = FALSE;
               pe = FindThing( ps->Current, FIND_VISIBLE, temp );
               if( !pe )
               {
                  DECLTEXT( msg, "Cannot see entity to retrieve from..." );
                  EnqueLink( ps->Command->ppOutput, &msg );
                  break;
               }
               pVar = GetVariable( pe->pVars, "_TABLE" );
               if( !pVar )
               {
                  DECLTEXT( msg, "Object is not associated with a table..." );
                  EnqueLink( ps->Command->ppOutput, &msg );
                  break;
               }
               nOutput = sprintf( byOutput, "Select * from %s",
                                            GetText( GetIndirect( pVar ) ) );
               FORALL( pe->pVars, idx, pVar )
               {
                  PTEXT pVal;
                  if( TextIs( pVar, "_TABLE" ) )
                     continue;
                  pVal = GetIndirect( NEXTLINE( pVar ) );
                  if( pVal )
                  {
                     if( didone )
                        nOutput += sprintf( byOutput + nOutput, "," );
                     else
                        nOutput += sprintf( byOutput + nOutput, " where (" );
                     {
                        PTEXT pValue;
                        PTEXT pInd;
                        pInd = NEXTLINE( pVar );
                        pValue = BuildLine( pVal );
                        //if( !IsNumber( pValue ) )
                        if( pInd->flags & ODBC_TF_DATE )
                           nOutput += sprintf( byOutput + nOutput, "%s%s#%s#",
                                             GetText( pVar ), GetBound( pInd ), GetText( pValue ) );
                        else if( pInd->flags & ODBC_TF_NUMBER )
                           nOutput += sprintf( byOutput + nOutput, "%s%s%s",
                                             GetText( pVar ), GetBound( pInd ), GetText( pValue ) );
                        else if( pInd->flags & ODBC_TF_TEXT )
                           nOutput += sprintf( byOutput + nOutput, "%s%s\'%s\'",
                                             GetText( pVar ), GetBound( pInd ), GetText( pValue ) );
                        else
                           nOutput += sprintf( byOutput + nOutput, "%s%s\'%s\'",
                                             GetText( pVar ), GetBound( pInd ), GetText( pValue ) );
                        //else
                           
                        //   nOutput += sprintf( byOutput + nOutput, "%s%s%s",
                        //                     GetText( pVar ), GetBound( NEXTLINE(pVar) ), GetText( pValue ) );
                        LineRelease( pValue );
                     }
                     didone = TRUE;
                  }
               }
               if( didone )
                  nOutput += sprintf( byOutput + nOutput, ")" );
               rc = SQLExecDirect( pODBC->hstmt
                                 , byOutput, SQL_NTS );
               // assuming of course that we did a /odbc create record table

               if( rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO )
               {
                  DECLTEXT( msg, "ODBC Command excecution failed(3)...." );
                  EnqueLink( ps->Command->ppOutput, &msg );
                  DumpInfo( pplq, SQL_HANDLE_STMT, pODBC->hstmt );
               } 
               else if( rc == SQL_SUCCESS )
               {
                  PENTITY pe;
                  pe = FindThing( ps->Current, FIND_VISIBLE, temp );
                  if( pe )
                  {  // this is the prototype record to fetch... 
                     // build the select query from it's variables...
                     BuildResultObjects( pODBC, pe );
                  }
                  else
                  {
                     // of course output fail message....
                  }
               }
            }
            else
            {
               // output some sort of error message... 
            }
         }
         break;
      case QUERY:
         {
         }
         break;
      case CLOSE:
         if( pdp && pdp->common.Type )
         {
            if( pODBC )
            {
               pODBC->hstmt = 0;
               SQLDisconnect( pODBC->hdbc );
   clean_open1:
               SQLFreeConnect( pODBC->hdbc );
               pODBC->hdbc = 0;
   clean_open0:
               SQLFreeEnv( pODBC->env );
               pODBC->env = 0;
               pdp->common.Type = 0;
               Release( pODBC );
               pODBC = NULL;
               pdp->handle = 0;
               DestroyDataPath( (PDATAPATH)pdp );
               SetLink( ps->Current->pPlugin, myPlug, 0 );
            }
         }
         break;
      case HELP:
         {
            DECLTEXT( leader, " --- ODBC Builtin Commands ---" );
            EnqueLink( ps->Command->ppOutput, &leader );
            WriteCommandList( ps->Command->ppOutput, commands, NUM_COMMANDS, NULL );
         }
         break;
      case SETTYPE:
         {
            PTEXT pSave, pBoundType;
            int one_bound = FALSE;
            pSave = parameters;
            temp = GetParam( ps, &parameters );
            if( pSave == temp )
            {
               DECLTEXT( msg, "Invalid variable reference passed to SETTYPE." );
               EnqueLink( ps->Command->ppOutput, &msg );
               break;
            }
            if( !temp )
            {
               DECLTEXT( msg, "Must specify variable and type to set." );
               EnqueLink( ps->Command->ppOutput, &msg );
               break;
            }
            while( pBoundType = GetParam( ps, &parameters ) )
            {
               one_bound = TRUE;
               if( TextLike( pBoundType, "date" ) )
               {
                  temp->flags &= ~( ODBC_TF_DATE|ODBC_TF_NUMBER|ODBC_TF_TEXT );
                  temp->flags |= ODBC_TF_DATE;
               }
               else if( TextLike( pBoundType, "number" ) )
               {
                  temp->flags &= ~( ODBC_TF_DATE|ODBC_TF_NUMBER|ODBC_TF_TEXT );
                  temp->flags |= ODBC_TF_NUMBER;
               }
               else if( TextLike( pBoundType, "text" ) )
               {
                  temp->flags &= ~( ODBC_TF_DATE|ODBC_TF_NUMBER|ODBC_TF_TEXT );
                  temp->flags |= ODBC_TF_TEXT;
               }
            }
            if( !one_bound )
            {
               DECLTEXT( msg, "Must specify type to set...date, number, text" );
               EnqueLink( ps->Command->ppOutput, &msg );
               break;
            }

         }
         break;
      default:
         {
            DECLTEXT( msg, "ODBC Operation unknown....check /odbc HELP..." );
            EnqueLink( ps->Command->ppOutput, &msg );
         }
         break;
      }
   }
}
   else
   {
      DECLTEXT( msg, "ODBC command not found... please use /odbc HELP..." );
      EnqueLink( ps->Command->ppOutput, &msg );
   }
   // always clear old statement....
   if( pODBC && pODBC->hstmt )
   {
      SQLFreeStmt( pODBC->hstmt, SQL_CLOSE );
      pODBC->hstmt = NULL;
   }

   return 0;
}



int Create( PSENTIENT ps, PENTITY pe, PTEXT parameters )
{
	// init the ODBC object...
	return 0;
}
