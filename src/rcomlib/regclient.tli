// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (d2a523c4).
//
// regclient.tli
//
// Wrapper implementations for Win32 type library M:\regserver\regclient\debug\regclient.dll
// compiler-generated file created 08/17/99 at 13:05:13 - DO NOT EDIT!

#pragma once

//
// interface IRegister wrapper method implementations
//

inline HRESULT IRegister::SetProduct ( _bstr_t ProductID, _bstr_t ProductName ) {
    HRESULT _hr = raw_SetProduct(ProductID, ProductName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRegister::SetCompany ( int Account, _bstr_t Name ) {
    HRESULT _hr = raw_SetCompany(Account, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRegister::Register ( ) {
    HRESULT _hr = raw_Register();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRegister::SetClientName ( _bstr_t Name ) {
    HRESULT _hr = raw_SetClientName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int IRegister::GetResult ( ) {
    int _result;
    HRESULT _hr = get_Result(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IRegister::GetResultText ( ) {
    BSTR _result;
    HRESULT _hr = get_ResultText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRegister::PutVisible ( int _arg1 ) {
    HRESULT _hr = put_Visible(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int IRegister::GetIsRegistered ( ) {
    int _result;
    HRESULT _hr = get_IsRegistered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRegister::PutPerUser ( int _arg1 ) {
    HRESULT _hr = put_PerUser(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IRegister::SetProduct_C ( char * ProductID, char * ProductName ) {
    HRESULT _hr = raw_SetProduct_C(ProductID, ProductName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRegister::SetCompany_C ( int Account, char * Name ) {
    HRESULT _hr = raw_SetCompany_C(Account, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRegister::SetClientName_C ( char * Name ) {
    HRESULT _hr = raw_SetClientName_C(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline char IRegister::GetResultText_C ( ) {
    char _result;
    HRESULT _hr = get_ResultText_C(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IRegister::GetRegKeyLong ( _bstr_t bKey ) {
    long _result;
    HRESULT _hr = get_RegKeyLong(bKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IRegister::PutRegKeyLong ( _bstr_t bKey, long pVal ) {
    HRESULT _hr = put_RegKeyLong(bKey, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IRegister::GetRegKeyString ( _bstr_t Key ) {
    BSTR _result;
    HRESULT _hr = get_RegKeyString(Key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IRegister::PutRegKeyString ( _bstr_t Key, _bstr_t pVal ) {
    HRESULT _hr = put_RegKeyString(Key, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
