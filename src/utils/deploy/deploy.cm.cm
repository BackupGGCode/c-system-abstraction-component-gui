set( BASE_PATH ${CMAKE_INSTALL_PREFIX} )
set( FILEOUT ${BASE_PATH}/CMakePackage )

FILE( WRITE ${FILEOUT} "#generated from deploy.cm.cm....\n" )

if( MSVC )
set( SUPPORTS_PARALLEL_BUILD_TYPE 1 )
endif( MSVC )

if( __LINUX64__ )
SET(  SHARED_LIBPATH "lib64" )
SET(  LINK_LIBPATH "lib64" )
SET(  SHARED_BINPATH "bin" )
elseif( __LINUX__ )
SET(  SHARED_LIBPATH "lib" )
SET(  LINK_LIBPATH "lib" )
SET(  SHARED_BINPATH "bin" )
else()
SET(  SHARED_LIBPATH "bin" )
SET(  LINK_LIBPATH "lib" )
SET(  SHARED_BINPATH "bin" )
endif()

set( __ARM__ @__ARM__@ )
if( __ARM__ )
ADD_DEFINITIONS( __ARM__ ON )
endif( __ARM__ )

set( __NO_ODBC__ @__NO_ODBC__@ )
if( __NO_ODBC__ )
ADD_DEFINITIONS( -D__NO_ODBC__=1 )
endif( __NO_ODBC__ )


		FILE( APPEND ${FILEOUT} "#set was_monolithic_build to build mode\n" )
		FILE( APPEND ${FILEOUT} "set( WAS_MONOLITHIC @BUILD_MONOLITHIC@ )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
if( __BULLET_ENABLED__ )
		FILE( APPEND ${FILEOUT} "set( BULLET_SOURCE @BULLET_SOURCE@ )\n" )
if( BT_USE_DOUBLE_PRECISION )
		FILE( APPEND ${FILEOUT} "add_definitions( -DBT_USE_DOUBLE_PRECISION )\n" )
endif()

#       (after MiniCL) BulletWorldImporter
		FILE( APPEND ${FILEOUT} "set( BULLET_LIBRARIES BulletMultiThreaded MiniCL BulletSoftBody BulletDynamics BulletCollision LinearMath ) \n" )
endif()
if( MAKE_RCOORD_SINGLE )
		FILE( APPEND ${FILEOUT} "add_definitions( -DMAKE_RCOORD_SINGLE )\n" )
endif()
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "enable_language(C)\n" )
		FILE( APPEND ${FILEOUT} "enable_language(CXX)\n" )
		FILE( APPEND ${FILEOUT} "\n" )

		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "SET( __NO_ODBC__ ${__NO_ODBC__})\n" )

if( __NO_ODBC__ )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D__NO_ODBC__=1 )\n" )
endif( __NO_ODBC__ )

if( FORCE_CXX )
		FILE( APPEND ${FILEOUT} "SET( FORCE_CXX ${FORCE_CXX})\n" )
endif( FORCE_CXX )

		FILE( APPEND ${FILEOUT} "SET( __ANDROID__ ${__ANDROID__})\n" )
if( __ANDROID__ )                
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D__ANDROID__ )\n" )
endif( __ANDROID__ )                                

		FILE( APPEND ${FILEOUT} "SET( BUILD_UNICODE ${BUILD_UNICODE} )\n" )
if( BUILD_UNICODE )
		FILE( APPEND ${FILEOUT} "ADD_DEFINITIONS( -D_UNICODE -DUNICODE )\n" )
endif( BUILD_UNICODE )                

		FILE( APPEND ${FILEOUT} "SET( __ARM__ ${__ARM__})\n" )
		FILE( APPEND ${FILEOUT} "SET( __CLR__ ${__CLR__})\n" )
		FILE( APPEND ${FILEOUT} "\#\#\#\#\#\#\# Needed to export these for porable binaries\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_UUID ${NEED_UUID})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_PNG ${NEED_PNG})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_ZLIB ${NEED_ZLIB})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_JPEG ${NEED_JPEG})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_FREETYPE ${NEED_FREETYPE})\n" )
if( __CLR__ )                
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHsc\" \"\" CMAKE_CXX_FLAGS_INIT ${CMAKE_CXX_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHsc\" \"\" CMAKE_C_FLAGS_INIT ${CMAKE_C_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHs\" \"\" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHs\" \"\" CMAKE_C_FLAGS_INIT ${CMAKE_C_FLAGS_INIT} )\n" )
                FILE( APPEND ${FILEOUT} "  string( REPLACE \"/EHsON\" \"\" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG} )\n" )
endif( __CLR__ )                
                
		FILE( APPEND ${FILEOUT} "SET( __LINUX__ ${__LINUX__})\n" )
		FILE( APPEND ${FILEOUT} "SET( NEED_UUID @NEED_UUID@)\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_BASE ${CMAKE_INSTALL_PREFIX} )\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_INCLUDE_DIR $" "{SACK_BASE}/include/SACK )\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_BAG_PLUSPLUS @SACK_BAG_PLUSPLUS@ )\n" )
		FILE( APPEND ${FILEOUT} "SET( SACK_PLATFORM_LIBRARIES @PLATFORM_LIBRARIES@)\n" )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES_PLUSPLUS @SACK_LIBRARIES_PLUSPLUS@ )\n" )

if( BUILD_MONOLITHIC )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES sack_bag $" "{SACK_BAG_PLUSPLUS} )\n" )
else( BUILD_MONOLITHIC )
	if( NOT __ANDROID__ )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES @BAG_PLUSPLUS@ bag @BAG_PSI_PLUSPLUS@ bag.psi bag.externals )\n" )
	else( NOT __ANDROID__ )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARIES bag bag.psi bag.externals )\n" )
	endif( NOT __ANDROID__ )
endif( BUILD_MONOLITHIC )

if( __LINUX64__ )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARY_DIR $" "{SACK_BASE}/lib64 )\n" )
else( __LINUX64__ )
		FILE( APPEND ${FILEOUT} "set( SACK_LIBRARY_DIR $" "{SACK_BASE}/lib )\n" )
endif( __LINUX64__ )

		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "set( USE_OPTIONS @USE_OPTIONS@ )\n" )
		FILE( APPEND ${FILEOUT} "if( NOT USE_OPTIONS )\n" )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__NO_OPTIONS__ )\n" )
		FILE( APPEND ${FILEOUT} "endif( NOT USE_OPTIONS )\n" )
if( USING_OLD_MINGW )
		FILE( APPEND ${FILEOUT} "add_definitions( -DMINGW_SUX )\n" )
endif( USING_OLD_MINGW )
		FILE( APPEND ${FILEOUT} "set( __NO_GUI__ @__NO_GUI__@ )\n" )
if( __NO_GUI__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__NO_GUI__ )\n" )
endif( __NO_GUI__ )
		FILE( APPEND ${FILEOUT} "set( __LINUX__ @__LINUX__@ )\n" )
		FILE( APPEND ${FILEOUT} "set( __LINUX64__ @__LINUX64__@ )\n" )
		if( __LINUX__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__LINUX__ )\n" )
		endif()
		if( __LINUX64__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__LINUX64__ )\n" )
		endif()
		if( __64__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__64__ )\n" )
		endif()
		if( __WINDOWS__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__WINDOWS__ )\n" )
		endif()
		FILE( APPEND ${FILEOUT} "set( WIN_SYS_LIBS @WIN_SYS_LIBS@ )\n" )
		FILE( APPEND ${FILEOUT} "set( SOCKET_LIBRARIES @SOCKET_LIBRARIES@ )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_CXX_FLAGS_DEBUG \"$" "{CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_CXX_FLAGS_RELWITHDEBINFO \"$" "{CMAKE_CXX_FLAGS_RELWITHDEBINFO} -D_DEBUG\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_C_FLAGS_DEBUG \"$" "{CMAKE_C_FLAGS_DEBUG} -D_DEBUG\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  CMAKE_C_FLAGS_RELWITHDEBINFO \"$" "{CMAKE_C_FLAGS_RELWITHDEBINFO} -D_DEBUG\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_REPO_REVISION \"@CURRENT_REPO_REVISION@\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_BUILD_TYPE \"@CMAKE_BUILD_TYPE@\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_GENERATOR \"@CMAKE_GENERATOR@\" )\n" )
		FILE( APPEND ${FILEOUT} "set(  SACK_PROJECT_NAME \"@CMAKE_PROJECT_NAME@\" )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "  if( $" "{CMAKE_COMPILER_IS_GNUCC} )\n" )
		FILE( APPEND ${FILEOUT} "    if( UNIX )\n" )
		FILE( APPEND ${FILEOUT} "      SET( CMAKE_EXE_LINKER_FLAGS \"-Wl,--as-needed\" )\n" )
		FILE( APPEND ${FILEOUT} "      SET( CMAKE_SHARED_LINKER_FLAGS \"-Wl,--as-needed\" )\n" )
		FILE( APPEND ${FILEOUT} "      SET( CMAKE_MODULE_LINKER_FLAGS \"-Wl,--as-needed\" )\n" )
		FILE( APPEND ${FILEOUT} "    endif( UNIX )\n" )
		FILE( APPEND ${FILEOUT} "    SET( FIRST_GCC_LIBRARY_SOURCE $" "{SACK_BASE}/src/sack/deadstart_list.c )\n" )
		FILE( APPEND ${FILEOUT} "    SET( FIRST_GCC_PROGRAM_SOURCE $" "{SACK_BASE}/src/sack/deadstart_list.c )\n" )
		FILE( APPEND ${FILEOUT} "    SET( LAST_GCC_LIBRARY_SOURCE $" "{SACK_BASE}/src/sack/deadstart_lib.c $" "{SACK_BASE}/src/sack/deadstart_end.c )\n" )
		FILE( APPEND ${FILEOUT} "    SET( LAST_GCC_PROGRAM_SOURCE $" "{SACK_BASE}/src/sack/deadstart_lib.c $" "{SACK_BASE}/src/sack/deadstart_prog.c $" "{SACK_BASE}/src/sack/deadstart_end.c )\n" )
		FILE( APPEND ${FILEOUT} "  endif()\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "if( MSVC OR WATCOM )\n" )
		FILE( APPEND ${FILEOUT} "  SET( LAST_GCC_PROGRAM_SOURCE $" "{SACK_BASE}/src/sack/deadstart_prog.c )\n" )
		FILE( APPEND ${FILEOUT} "endif( MSVC OR WATCOM )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
if( WIN32 )
		FILE( APPEND ${FILEOUT} "add_definitions( -D_WIN32_WINNT=@WIN32_VERSION@ -DWINVER=@WIN32_VERSION@)\n" )
endif( WIN32 )
if( __LINUX__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__LINUX__)\n" )
endif( __LINUX__)
if( __LINUX64__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D__LINUX64__)\n" )
endif( __LINUX64__)
      FILE( APPEND ${FILEOUT} "\n" )
if( MSVC )
      #// remove snprintf deprication and posix warning
		FILE( APPEND ${FILEOUT} "add_definitions( -D_CRT_SECURE_NO_WARNINGS -wd4995 -wd4996)\n" )
		FILE( APPEND ${FILEOUT} "    if( CMAKE_CL_64 )\n" )
		FILE( APPEND ${FILEOUT} "      add_definitions( -D_AMD64_ -D__64__ -D_WIN64 )\n" )
		FILE( APPEND ${FILEOUT} "    else( CMAKE_CL_64 )\n" )
		FILE( APPEND ${FILEOUT} "      add_definitions( -D_X86_ )\n" )
		FILE( APPEND ${FILEOUT} "    endif( CMAKE_CL_64 )\n" )
endif( MSVC )
if( __UNICODE__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -DUNICODE )\n" )
endif()
if( __UNICODE__ )
		FILE( APPEND ${FILEOUT} "add_definitions( -D_UNICODE )\n" )
endif()

		FILE( APPEND ${FILEOUT} "SET( DATA_INSTALL_PREFIX resources )\n" )
      FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "#### Carried Definition of how library was linked\n" )
		FILE( APPEND ${FILEOUT} "SET( FORCE_MSVCRT @FORCE_MSVCRT@)\n" )
		FILE( APPEND ${FILEOUT} "SET( sack_extra_link_flags @extra_link_flags@)\n" )
      FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "include( $" "{SACK_BASE}/DefaultInstall.cmake )\n" )

if( BUILD_MONOLITHIC )
		FILE( APPEND ${FILEOUT} "add_definitions( -DFORCE_NO_INTERFACE )\n" )
	      FILE( APPEND ${FILEOUT} "\n" )
endif( BUILD_MONOLITHIC )

# begin Install_Sack macro; this handles optional second arg extension...
		FILE( APPEND ${FILEOUT} "macro( INSTALL_SACK dest )\n" )
		FILE( APPEND ${FILEOUT} "\n" )
		FILE( APPEND ${FILEOUT} "set( BINARY_OUTPUT_DIR $" "{dest} )\n" )
		FILE( APPEND ${FILEOUT} "if(  \"$" "{ARGN}\" STREQUAL \"\"  )\n" )
		FILE( APPEND ${FILEOUT} "  set( LIBRARY_OUTPUT_DIR $" "{dest} )\n" )
		FILE( APPEND ${FILEOUT} "else( \"$" "{ARGN}\" STREQUAL \"\" )\n" )                
		FILE( APPEND ${FILEOUT} "  set( LIBRARY_OUTPUT_DIR $" "{ARGN} )\n" )
		FILE( APPEND ${FILEOUT} "endif( \"$" "{ARGN}\" STREQUAL \"\" )\n" )

##############################################
############# BUILD INSTALL LISTS 
##############################################

if( BUILD_MONOLITHIC )

                set( libfile_list ${libfile_list} sack_bag )
   if( NOT __NO_CPLUSPLUS )
                set( libfile_list ${libfile_list} @SACK_BAG_PLUSPLUS@  )
   endif( NOT __NO_CPLUSPLUS )
                
else( BUILD_MONOLITHIC )

# bag.image is memory only; non platform specific utility
                SET( libfile_list ${libfile_list} bag bag.externals bag.image bag.psi )

   if( NOT __NO_CPLUSPLUS )
                set( libfile_list ${libfile_list} @BAG_PLUSPLUS@ @BAG_PSI_PLUSPLUS@ )
   endif( NOT __NO_CPLUSPLUS )

# Win32 or __UNIX support PureGL and puregl2... 
                SET( libfile_list ${libfile_list} bag.image.puregl bag.image.puregl2 )
                SET( libfile_list ${libfile_list} bag.video.puregl bag.video.puregl2 )

# proxy is memory-only and platform agnostic                
                SET( libfile_list ${libfile_list} bag.video.proxy.server )

endif( BUILD_MONOLITHIC )

if( NOT __NO_OPTIONS__ )
    if( NOT __NO_GUI__ )
                SET( progfile_list ${progfile_list} EditOptions )
    endif( NOT __NO_GUI__ )
    if( NOT __ANDROID__ )
                SET( progfile_list ${progfile_list} SetOption )
    endif( NOT __ANDROID__ )
		SET( literal_libfile_list ${literal_libfile_list} EditOptions.plugin  )
endif( NOT __NO_OPTIONS__ )


if( WIN32 )
		SET( literal_libfile_list ${literal_libfile_list} application_delay.module loginfo.module seed_random.module )
                set( libfile_list ${libfile_list}  glew )
if( NOT __NO_MSGSVR__ )
		SET( progfile_list ${progfile_list} service_list sack.msgsvr.service msgsvr )
		SET( literal_libfile_list ${literal_libfile_list} sack.msgsvr.service.plugin  )
endif( NOT __NO_MSGSVR__ )
endif( WIN32 )



if( __QNX__ )
                SET( libfile_list ${libfile_list} freeglut-gles2 )
endif( __QNX__ )

if( __ANDROID__ )
                SET( libfile_list ${libfile_list} bag.video.frame.lock )
else( __ANDROID__ )
    if( NOT __NO_OPTIONS__ )
                SET( progfile_list ${progfile_list} importini exportini )
    endif( NOT __NO_OPTIONS__ )
    if( NOT __NO_GUI__ )
                SET( progfile_list ${progfile_list} DumpFontCache )
    endif( NOT __NO_GUI__ )
                SET( libfile_list ${libfile_list} bag.video )
endif( __ANDROID__ )


if( DIRECTX_SDK AND NOT WATCOM )
		SET( libfile_list ${libfile_list} bag.video.pured3d )
		SET( libfile_list ${libfile_list} bag.video.pured3d2 )
		SET( libfile_list ${libfile_list} bag.video.pured3d10 )
		SET( libfile_list ${libfile_list} bag.video.pured3d11 )
		SET( libfile_list ${libfile_list} bag.image.pured3d )
		SET( libfile_list ${libfile_list} bag.image.pured3d2 )
		SET( libfile_list ${libfile_list} bag.image.pured3d10 )
		SET( libfile_list ${libfile_list} bag.image.pured3d11 )
endif( DIRECTX_SDK AND NOT WATCOM)

##############################################
############# END BUILD INSTALL LISTS 
##############################################


                foreach( lib ${libfile_list} )              
			FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@${lib}@CMAKE_SHARED_LIBRARY_SUFFIX@ DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
                endforeach( lib  )              
if( NOT __ANDROID__ )                
                foreach( lib ${literal_libfile_list} )              
			FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${SHARED_LIBPATH}/${lib} DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
                endforeach( lib  )              
                foreach( lib ${progfile_list} )              
			FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${SHARED_BINPATH}/${lib}@CMAKE_EXECUTABLE_SUFFIX@ DESTINATION $" "{dest} )\n" )
                endforeach( lib  )              
else( NOT __ANDROID__ )                
                foreach( lib ${literal_libfile_list} )              
			FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@${lib}@CMAKE_SHARED_LIBRARY_SUFFIX@ DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
                endforeach( lib  )              
                foreach( lib ${progfile_list}  )
			FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@${lib}@CMAKE_SHARED_LIBRARY_SUFFIX@ DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
			FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@${lib}.code@CMAKE_SHARED_LIBRARY_SUFFIX@ DESTINATION $" "{LIBRARY_OUTPUT_DIR} )\n" )
                endforeach( lib  )
endif( NOT __ANDROID__ )

if( NOT __NO_GUI__ )
		FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${BINARY_OUTPUT_DIR}/images/frame_border.png DESTINATION $" "{dest}/images )\n" )
endif( NOT __NO_GUI__ )
		
if( __QNX__ )
		FILE( APPEND ${FILEOUT} "install( FILES $" "{SACK_BASE}/${SHARED_LIBPATH}/@CMAKE_SHARED_LIBRARY_PREFIX@freeglut-gles2@CMAKE_SHARED_LIBRARY_SUFFIX@ DESTINATION $" "{dest} )\n" )
endif( __QNX__ )

		FILE( APPEND ${FILEOUT} "install( DIRECTORY $" "{SACK_BASE}/${BINARY_OUTPUT_DIR}/ DESTINATION $" "{dest} FILES_MATCHING PATTERN *.interface.conf PATTERN interface.conf )\n" )
		FILE( APPEND ${FILEOUT} "install( DIRECTORY $" "{SACK_BASE}/${BINARY_OUTPUT_DIR}/webclient DESTINATION $" "{dest}  )\n" )


		FILE( APPEND ${FILEOUT} "ENDMACRO( INSTALL_SACK )\n" )

		FILE( APPEND ${FILEOUT} "\n" )

		#//FILE( APPEND ${FILEOUT} "IF(CMAKE_BUILD_TPYE_INITIALIZED_TO_DEFAULT)\n" )

		FILE( APPEND ${FILEOUT} "set(CMAKE_BUILD_TYPE \"@CMAKE_BUILD_TYPE@\" CACHE STRING \"Set build type\")\n" )
		FILE( APPEND ${FILEOUT} "set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS $" "{CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )\n" )
                
		#//FILE( APPEND ${FILEOUT} "ENDIF(CMAKE_BUILD_TPYE_INITIALIZED_TO_DEFAULT)\n" )

		FILE( APPEND ${FILEOUT} "\n" )

